// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import, no_leading_underscores_for_local_identifiers
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:flu_dingtalk/flu_dingtalk_plugin_api.dart';


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is DTAuthReq) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is DTBaseResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is FluDTAuthorizeResp) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is FluDTShareResp) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return DTAuthReq.decode(readValue(buffer)!);
      case 130: 
        return DTBaseResponse.decode(readValue(buffer)!);
      case 131: 
        return FluDTAuthorizeResp.decode(readValue(buffer)!);
      case 132: 
        return FluDTShareResp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TestHostDingTalkFlutterApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  String openAPIVersion();

  Future<bool> openDDApp();

  bool isDingDingInstalled();

  bool registerApp(String appId, String iosBundleId);

  bool isDingTalkSupportSSO();

  Future<bool> sendAuth(DTAuthReq authReq);

  /// 分享文本
  /// [text] 文本内容. @note 长度不超过 1K.
  Future<bool> sendTextMessage(String text);

  /// 分享网页链接
  /// [url] Web页面的URL. @note 长度不能超过 10K.
  /// [title] 标题. @note 长度不超过 512Byte.
  /// [content] 描述内容. @note 长度不超过 1K.
  /// [thumbUrl] 缩略图URL. @note 长度不超过 10K.
  Future<bool> sendWebPageMessage(String url, {required String title, required String content, required String thumbUrl,});

  /// [picUrl] is necessary on IOS
  /// 分享图片（IOS端必传picUrl）
  /// [picUrl] 图片URL. @note 长度不能超过 10K.
  Future<bool> sendImageMessage({String? picUrl, String? picPath});

  static void setUp(TestHostDingTalkFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openAPIVersion$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          try {
            final String output = api.openAPIVersion();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openDDApp$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          try {
            final bool output = await api.openDDApp();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingDingInstalled$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          try {
            final bool output = api.isDingDingInstalled();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp was null, expected non-null String.');
          final String? arg_iosBundleId = (args[1] as String?);
          assert(arg_iosBundleId != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp was null, expected non-null String.');
          try {
            final bool output = api.registerApp(arg_appId!, arg_iosBundleId!);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingTalkSupportSSO$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          try {
            final bool output = api.isDingTalkSupportSSO();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DTAuthReq? arg_authReq = (args[0] as DTAuthReq?);
          assert(arg_authReq != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth was null, expected non-null DTAuthReq.');
          try {
            final bool output = await api.sendAuth(arg_authReq!);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_text = (args[0] as String?);
          assert(arg_text != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage was null, expected non-null String.');
          try {
            final bool output = await api.sendTextMessage(arg_text!);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage was null, expected non-null String.');
          final String? arg_title = (args[1] as String?);
          assert(arg_title != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage was null, expected non-null String.');
          final String? arg_content = (args[2] as String?);
          assert(arg_content != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage was null, expected non-null String.');
          final String? arg_thumbUrl = (args[3] as String?);
          assert(arg_thumbUrl != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage was null, expected non-null String.');
          try {
            final bool output = await api.sendWebPageMessage(arg_url!, title: arg_title!, content: arg_content!, thumbUrl: arg_thumbUrl!);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendImageMessage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(pigeonVar_channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendImageMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_picUrl = (args[0] as String?);
          final String? arg_picPath = (args[1] as String?);
          try {
            final bool output = await api.sendImageMessage(picUrl: arg_picUrl, picPath: arg_picPath);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
