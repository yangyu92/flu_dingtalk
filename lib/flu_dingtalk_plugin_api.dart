// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class DTAuthReq {
  DTAuthReq({
    this.redirectURI,
    this.state,
  });

  String? redirectURI;

  String? state;

  Object encode() {
    return <Object?>[
      redirectURI,
      state,
    ];
  }

  static DTAuthReq decode(Object result) {
    result as List<Object?>;
    return DTAuthReq(
      redirectURI: result[0] as String?,
      state: result[1] as String?,
    );
  }
}

class DTBaseResponse {
  DTBaseResponse({
    required this.errorCode,
    required this.errorMessage,
  });

  String errorCode;

  String errorMessage;

  Object encode() {
    return <Object?>[
      errorCode,
      errorMessage,
    ];
  }

  static DTBaseResponse decode(Object result) {
    result as List<Object?>;
    return DTBaseResponse(
      errorCode: result[0]! as String,
      errorMessage: result[1]! as String,
    );
  }
}

class FluDTAuthorizeResp {
  FluDTAuthorizeResp({
    required this.errorCode,
    required this.errorMessage,
    required this.accessCode,
    this.state,
  });

  String errorCode;

  String errorMessage;

  String accessCode;

  String? state;

  Object encode() {
    return <Object?>[
      errorCode,
      errorMessage,
      accessCode,
      state,
    ];
  }

  static FluDTAuthorizeResp decode(Object result) {
    result as List<Object?>;
    return FluDTAuthorizeResp(
      errorCode: result[0]! as String,
      errorMessage: result[1]! as String,
      accessCode: result[2]! as String,
      state: result[3] as String?,
    );
  }
}

class FluDTShareResp {
  FluDTShareResp({
    required this.errorCode,
    required this.errorMessage,
    required this.shareResult,
  });

  String errorCode;

  String errorMessage;

  bool shareResult;

  Object encode() {
    return <Object?>[
      errorCode,
      errorMessage,
      shareResult,
    ];
  }

  static FluDTShareResp decode(Object result) {
    result as List<Object?>;
    return FluDTShareResp(
      errorCode: result[0]! as String,
      errorMessage: result[1]! as String,
      shareResult: result[2]! as bool,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is DTAuthReq) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is DTBaseResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is FluDTAuthorizeResp) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is FluDTShareResp) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return DTAuthReq.decode(readValue(buffer)!);
      case 130: 
        return DTBaseResponse.decode(readValue(buffer)!);
      case 131: 
        return FluDTAuthorizeResp.decode(readValue(buffer)!);
      case 132: 
        return FluDTShareResp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FluDingtalkPluginApi {
  /// Constructor for [FluDingtalkPluginApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FluDingtalkPluginApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<String> openAPIVersion() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openAPIVersion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<bool> openDDApp() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openDDApp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isDingDingInstalled() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingDingInstalled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> registerApp(String appId, String iosBundleId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[appId, iosBundleId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isDingTalkSupportSSO() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingTalkSupportSSO$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> sendAuth(DTAuthReq authReq) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[authReq]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// 分享文本
  /// [text] 文本内容. @note 长度不超过 1K.
  Future<bool> sendTextMessage(String text) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[text]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// 分享网页链接
  /// [url] Web页面的URL. @note 长度不能超过 10K.
  /// [title] 标题. @note 长度不超过 512Byte.
  /// [content] 描述内容. @note 长度不超过 1K.
  /// [thumbUrl] 缩略图URL. @note 长度不超过 10K.
  Future<bool> sendWebPageMessage(String url, {required String title, required String content, required String thumbUrl,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[url, title, content, thumbUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// [picUrl] is necessary on IOS
  /// 分享图片（IOS端必传picUrl）
  /// [picUrl] 图片URL. @note 长度不能超过 10K.
  Future<bool> sendImageMessage({String? picUrl, String? picPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendImageMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[picUrl, picPath]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}

abstract class FluDingTalkEventApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onAuthResponse(FluDTAuthorizeResp authResp);

  void onShareResponse(FluDTShareResp shareResp);

  void onBaseResponse(DTBaseResponse response);

  static void setUp(FluDingTalkEventApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onAuthResponse$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onAuthResponse was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FluDTAuthorizeResp? arg_authResp = (args[0] as FluDTAuthorizeResp?);
          assert(arg_authResp != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onAuthResponse was null, expected non-null FluDTAuthorizeResp.');
          try {
            api.onAuthResponse(arg_authResp!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onShareResponse$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onShareResponse was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FluDTShareResp? arg_shareResp = (args[0] as FluDTShareResp?);
          assert(arg_shareResp != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onShareResponse was null, expected non-null FluDTShareResp.');
          try {
            api.onShareResponse(arg_shareResp!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onBaseResponse$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onBaseResponse was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DTBaseResponse? arg_response = (args[0] as DTBaseResponse?);
          assert(arg_response != null,
              'Argument for dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onBaseResponse was null, expected non-null DTBaseResponse.');
          try {
            api.onBaseResponse(arg_response!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
