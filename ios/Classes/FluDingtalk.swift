// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct DTAuthReq {
  var redirectURI: String? = nil
  var state: String? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DTAuthReq? {
    let redirectURI: String? = nilOrValue(pigeonVar_list[0])
    let state: String? = nilOrValue(pigeonVar_list[1])

    return DTAuthReq(
      redirectURI: redirectURI,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      redirectURI,
      state,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DTBaseResponse {
  var errorCode: String
  var errorMessage: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DTBaseResponse? {
    let errorCode = pigeonVar_list[0] as! String
    let errorMessage = pigeonVar_list[1] as! String

    return DTBaseResponse(
      errorCode: errorCode,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      errorCode,
      errorMessage,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FluDTAuthorizeResp {
  var errorCode: String
  var errorMessage: String
  var accessCode: String
  var state: String? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FluDTAuthorizeResp? {
    let errorCode = pigeonVar_list[0] as! String
    let errorMessage = pigeonVar_list[1] as! String
    let accessCode = pigeonVar_list[2] as! String
    let state: String? = nilOrValue(pigeonVar_list[3])

    return FluDTAuthorizeResp(
      errorCode: errorCode,
      errorMessage: errorMessage,
      accessCode: accessCode,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      errorCode,
      errorMessage,
      accessCode,
      state,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FluDTShareResp {
  var errorCode: String
  var errorMessage: String
  var shareResult: Bool



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FluDTShareResp? {
    let errorCode = pigeonVar_list[0] as! String
    let errorMessage = pigeonVar_list[1] as! String
    let shareResult = pigeonVar_list[2] as! Bool

    return FluDTShareResp(
      errorCode: errorCode,
      errorMessage: errorMessage,
      shareResult: shareResult
    )
  }
  func toList() -> [Any?] {
    return [
      errorCode,
      errorMessage,
      shareResult,
    ]
  }
}

private class FluDingtalkPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return DTAuthReq.fromList(self.readValue() as! [Any?])
    case 130:
      return DTBaseResponse.fromList(self.readValue() as! [Any?])
    case 131:
      return FluDTAuthorizeResp.fromList(self.readValue() as! [Any?])
    case 132:
      return FluDTShareResp.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FluDingtalkPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DTAuthReq {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? DTBaseResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? FluDTAuthorizeResp {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? FluDTShareResp {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FluDingtalkPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FluDingtalkPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FluDingtalkPigeonCodecWriter(data: data)
  }
}

class FluDingtalkPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FluDingtalkPigeonCodec(readerWriter: FluDingtalkPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FluDingtalkPluginApi {
  func openAPIVersion() throws -> String
  func openDDApp(completion: @escaping (Result<Bool, Error>) -> Void)
  func isDingDingInstalled() throws -> Bool
  func registerApp(appId: String, iosBundleId: String) throws -> Bool
  func isDingTalkSupportSSO() throws -> Bool
  func sendAuth(authReq: DTAuthReq, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 分享文本
  /// [text] 文本内容. @note 长度不超过 1K.
  func sendTextMessage(text: String, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 分享网页链接
  /// [url] Web页面的URL. @note 长度不能超过 10K.
  /// [title] 标题. @note 长度不超过 512Byte.
  /// [content] 描述内容. @note 长度不超过 1K.
  /// [thumbUrl] 缩略图URL. @note 长度不超过 10K.
  func sendWebPageMessage(url: String, title: String, content: String, thumbUrl: String, completion: @escaping (Result<Bool, Error>) -> Void)
  /// [picUrl] is necessary on IOS
  /// 分享图片（IOS端必传picUrl）
  /// [picUrl] 图片URL. @note 长度不能超过 10K.
  func sendImageMessage(picUrl: String?, picPath: String?, completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FluDingtalkPluginApiSetup {
  static var codec: FlutterStandardMessageCodec { FluDingtalkPigeonCodec.shared }
  /// Sets up an instance of `FluDingtalkPluginApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FluDingtalkPluginApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let openAPIVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openAPIVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openAPIVersionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.openAPIVersion()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openAPIVersionChannel.setMessageHandler(nil)
    }
    let openDDAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openDDApp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openDDAppChannel.setMessageHandler { _, reply in
        api.openDDApp { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      openDDAppChannel.setMessageHandler(nil)
    }
    let isDingDingInstalledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingDingInstalled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDingDingInstalledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDingDingInstalled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDingDingInstalledChannel.setMessageHandler(nil)
    }
    let registerAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerAppChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let iosBundleIdArg = args[1] as! String
        do {
          let result = try api.registerApp(appId: appIdArg, iosBundleId: iosBundleIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      registerAppChannel.setMessageHandler(nil)
    }
    let isDingTalkSupportSSOChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingTalkSupportSSO\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDingTalkSupportSSOChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDingTalkSupportSSO()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDingTalkSupportSSOChannel.setMessageHandler(nil)
    }
    let sendAuthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendAuthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let authReqArg = args[0] as! DTAuthReq
        api.sendAuth(authReq: authReqArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendAuthChannel.setMessageHandler(nil)
    }
    /// 分享文本
    /// [text] 文本内容. @note 长度不超过 1K.
    let sendTextMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendTextMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textArg = args[0] as! String
        api.sendTextMessage(text: textArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendTextMessageChannel.setMessageHandler(nil)
    }
    /// 分享网页链接
    /// [url] Web页面的URL. @note 长度不能超过 10K.
    /// [title] 标题. @note 长度不超过 512Byte.
    /// [content] 描述内容. @note 长度不超过 1K.
    /// [thumbUrl] 缩略图URL. @note 长度不超过 10K.
    let sendWebPageMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendWebPageMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let titleArg = args[1] as! String
        let contentArg = args[2] as! String
        let thumbUrlArg = args[3] as! String
        api.sendWebPageMessage(url: urlArg, title: titleArg, content: contentArg, thumbUrl: thumbUrlArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendWebPageMessageChannel.setMessageHandler(nil)
    }
    /// [picUrl] is necessary on IOS
    /// 分享图片（IOS端必传picUrl）
    /// [picUrl] 图片URL. @note 长度不能超过 10K.
    let sendImageMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendImageMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendImageMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let picUrlArg: String? = nilOrValue(args[0])
        let picPathArg: String? = nilOrValue(args[1])
        api.sendImageMessage(picUrl: picUrlArg, picPath: picPathArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendImageMessageChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FluDingTalkEventApiProtocol {
  func onAuthResponse(authResp authRespArg: FluDTAuthorizeResp, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onShareResponse(shareResp shareRespArg: FluDTShareResp, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onBaseResponse(response responseArg: DTBaseResponse, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class FluDingTalkEventApi: FluDingTalkEventApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FluDingtalkPigeonCodec {
    return FluDingtalkPigeonCodec.shared
  }
  func onAuthResponse(authResp authRespArg: FluDTAuthorizeResp, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onAuthResponse\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([authRespArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onShareResponse(shareResp shareRespArg: FluDTShareResp, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onShareResponse\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([shareRespArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBaseResponse(response responseArg: DTBaseResponse, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onBaseResponse\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([responseArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
