// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package cn.yymm.flu_dingtalk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FluDingtalkPluginFlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FluDingtalkPluginFlutterError {
  return FluDingtalkPluginFlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FluDingtalkPluginFlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class DTAuthReq (
  val redirectURI: String? = null,
  val state: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DTAuthReq {
      val redirectURI = pigeonVar_list[0] as String?
      val state = pigeonVar_list[1] as String?
      return DTAuthReq(redirectURI, state)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      redirectURI,
      state,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DTBaseResponse (
  val errorCode: String,
  val errorMessage: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DTBaseResponse {
      val errorCode = pigeonVar_list[0] as String
      val errorMessage = pigeonVar_list[1] as String
      return DTBaseResponse(errorCode, errorMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorCode,
      errorMessage,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FluDTAuthorizeResp (
  val errorCode: String,
  val errorMessage: String,
  val accessCode: String,
  val state: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FluDTAuthorizeResp {
      val errorCode = pigeonVar_list[0] as String
      val errorMessage = pigeonVar_list[1] as String
      val accessCode = pigeonVar_list[2] as String
      val state = pigeonVar_list[3] as String?
      return FluDTAuthorizeResp(errorCode, errorMessage, accessCode, state)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorCode,
      errorMessage,
      accessCode,
      state,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FluDTShareResp (
  val errorCode: String,
  val errorMessage: String,
  val shareResult: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FluDTShareResp {
      val errorCode = pigeonVar_list[0] as String
      val errorMessage = pigeonVar_list[1] as String
      val shareResult = pigeonVar_list[2] as Boolean
      return FluDTShareResp(errorCode, errorMessage, shareResult)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorCode,
      errorMessage,
      shareResult,
    )
  }
}
private open class FluDingtalkPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DTAuthReq.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DTBaseResponse.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FluDTAuthorizeResp.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FluDTShareResp.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DTAuthReq -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is DTBaseResponse -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is FluDTAuthorizeResp -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is FluDTShareResp -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FluDingtalkPluginApi {
  fun openAPIVersion(): String
  fun openDDApp(callback: (Result<Boolean>) -> Unit)
  fun isDingDingInstalled(): Boolean
  fun registerApp(appId: String, iosBundleId: String): Boolean
  fun isDingTalkSupportSSO(): Boolean
  fun sendAuth(authReq: DTAuthReq, callback: (Result<Boolean>) -> Unit)
  /**
   * 分享文本
   * [text] 文本内容. @note 长度不超过 1K.
   */
  fun sendTextMessage(text: String, callback: (Result<Boolean>) -> Unit)
  /**
   * 分享网页链接
   * [url] Web页面的URL. @note 长度不能超过 10K.
   * [title] 标题. @note 长度不超过 512Byte.
   * [content] 描述内容. @note 长度不超过 1K.
   * [thumbUrl] 缩略图URL. @note 长度不超过 10K.
   */
  fun sendWebPageMessage(url: String, title: String, content: String, thumbUrl: String, callback: (Result<Boolean>) -> Unit)
  /**
   * [picUrl] is necessary on IOS
   * 分享图片（IOS端必传picUrl）
   * [picUrl] 图片URL. @note 长度不能超过 10K.
   */
  fun sendImageMessage(picUrl: String?, picPath: String?, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by FluDingtalkPluginApi. */
    val codec: MessageCodec<Any?> by lazy {
      FluDingtalkPigeonCodec()
    }
    /** Sets up an instance of `FluDingtalkPluginApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FluDingtalkPluginApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openAPIVersion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.openAPIVersion())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.openDDApp$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.openDDApp{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingDingInstalled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isDingDingInstalled())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.registerApp$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appIdArg = args[0] as String
            val iosBundleIdArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.registerApp(appIdArg, iosBundleIdArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.isDingTalkSupportSSO$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isDingTalkSupportSSO())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendAuth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authReqArg = args[0] as DTAuthReq
            api.sendAuth(authReqArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendTextMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textArg = args[0] as String
            api.sendTextMessage(textArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendWebPageMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val titleArg = args[1] as String
            val contentArg = args[2] as String
            val thumbUrlArg = args[3] as String
            api.sendWebPageMessage(urlArg, titleArg, contentArg, thumbUrlArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flu_dingtalk.FluDingtalkPluginApi.sendImageMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val picUrlArg = args[0] as String?
            val picPathArg = args[1] as String?
            api.sendImageMessage(picUrlArg, picPathArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FluDingTalkEventApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FluDingTalkEventApi. */
    val codec: MessageCodec<Any?> by lazy {
      FluDingtalkPigeonCodec()
    }
  }
  fun onAuthResponse(authRespArg: FluDTAuthorizeResp, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onAuthResponse$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(authRespArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FluDingtalkPluginFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onShareResponse(shareRespArg: FluDTShareResp, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onShareResponse$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(shareRespArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FluDingtalkPluginFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onBaseResponse(responseArg: DTBaseResponse, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flu_dingtalk.FluDingTalkEventApi.onBaseResponse$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(responseArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FluDingtalkPluginFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
